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






//METODOS CON STREAMS:
	public Long obtenerNumeroClientesXGeneroYMiembro(Gender gen, Boolean mem) {
//		Dado un "Género" y un valor de "Miembro", devuelve el total de clientes que cumplen
//		dichos requisitos.
		Predicate<Sales> pred = s -> s.getGender().equals(gen) && s.getMember().equals(mem);
		return this.ventas.stream().filter(pred).count();
	}
	
	public Boolean alMenosUnClienteObtuvoXCantidadDadoCiudad(Integer can, String ciu) {
//		Dada una "Cantidad", y una "Ciudad", devuelve un Boolean, si hay almenos un registro
//		que esta en esa ciudad y supera la cantidad aportada como parametro.
//		La cantidad introducida no puede ser menor o igual a 0.
		Checkers.check("La cantidad no puede ser inferior o igual a 0.", can>0);
		Predicate<Sales> pred = s -> s.getCity().equals(ciu);
		Predicate<Sales> pred2 = s -> s.getQuantity()>=can;
		return this.ventas.stream().filter(pred).anyMatch(pred2);
	}

	public Double obtenerMediaImporteTotalDadoXFecha(LocalDate fh) {
//		Dada un "Fecha", muestra la media del importe total aportado de los dias anteriores a
//		esa fecha.
//		La fecha no puede ser anterior al 01/01/2018
		Checkers.check("La fecha no puede ser anterior a 01/01/2018.", fh.isAfter(LocalDate.of(2018, 01, 01)));
		return this.ventas.stream()
				.filter(v -> v.getDate().isBefore(fh))
				.mapToDouble(Sales::getTotal)
				.average().orElse(0d);
	}
	
	public List<Sales> obtenerNRegistrosMasTiempoComprando(Integer n){
//		Dado un limite "n", devuelve una lista con los "n" registros que mas tiempo han 
//		estado comprando. En caso de que haya mas registros con la misma duracion se comparara
//		dependiendo de la cantidad.
//		El límite no puede ser menor o igual a 0.
		Checkers.check("El limite no puede ser inferior o igual a 0.", n>0);
		Comparator<Sales> cmp = Comparator.comparing((Sales s) -> s.getQuantity()).reversed();
		return this.ventas.stream()
				.sorted(Comparator.comparing(Sales::getDuration).reversed().thenComparing(cmp))
				.limit(n)
				.collect(Collectors.toList());
	}
	
	public Map<String, Sales> obtenerMayorCompraPorCiudad(){
		//Develve un "Map", donde las clave son las ciudades, y el valor es el registro con 
		//el mayor importe total. 
		//1.- Creamos un diccionario que agrupe las ventas por ciudad:
		Map<String, List<Sales>> aux = this.ventas.stream().collect(Collectors.groupingBy(Sales::getCity));
		
		//2.- Sobre el diccionario creado, hacemos un entrySet, para hacer otro diccionario con
		//las mismas claves, pero ahora con el registro con la mayor compra:
		return aux.entrySet().stream()
				.collect(Collectors.toMap(v -> v.getKey(), 
						v -> Collections.max(v.getValue(), Comparator.comparing(Sales::getTotal))));
	}
	
	public String obtenerCiudadConMayorCompra() {
		//Con la funcion creada anteriormente, hacemos un entrySet, para quedarnos con la clave (ciudad),
		//del registro que haya realizado una mayor compra:
		return obtenerMayorCompraPorCiudad().entrySet().stream()
				.max(Comparator.comparing(v -> v.getValue().getTotal())).get().getKey();
	}
	
	public Map<LocalDate, List<Sales>> obtenerVentasPorFecha(){
		//devuelve un "Map", donde las claves son las fechas en las que se han realizado las compras, 
		//y el valor, es una lista de ventas.
		//Creamos un diccionario donde las claves sean las fechas y los valores las ventas producidad 
		//en esa fecha:
		return this.ventas.stream()
				.collect(Collectors.groupingBy(Sales::getDate));
	}
	
	public Map<Category, Long> obtenerNumeroDeComprasPorCatergoria(){
		//devuelve un "Map", donde las claves son las "Categorias" de las compras que se han realizado,
		//y el valor, es un tipo "Long", con el numero de compras que se han realizado de dicha categoria.
		//Creamos un diccionario donde las claves sean las Categorias de los tipos de compra y, los 
		//valores el numero de compras que se han realizado por categoria.
		return this.ventas.stream()
				.collect(Collectors.groupingBy(Sales::getCategory,
						Collectors.counting()));
	}
	
	public List<Category> obtenerListaDeCategoriasOrdenadasPorCompra(){
		//Vamos a obtener una lista ordenada de menor a mayor, segun el numero de compras realizadas
		//por categoria. Para ello, utilizaremos la funcion anteriormente creada, la cual nos daba 
		//un diccionario con las categorias y el total de compras.
		
		//1.- LLamamos a la funcion para tener dicho diccionario:
		Map<Category, Long> aux = obtenerNumeroDeComprasPorCatergoria();
		
		//2.- Hacemos un entrySet() al diccionario para poder aplicar .stream(), y ordenamos la lista:
		return aux.entrySet().stream()
				.sorted(Comparator.comparing(v -> v.getValue()))
				.map(v -> v.getKey())
				.collect(Collectors.toList());
	}
	
	public Entry<String, Double> obtenerZonaConMayorPromedioDeGastoDadoXPago(Payment py) {
		//Vamos a devolver la paraje (clave, valor) con mayor promedio, dado un parameto de tipo "Payment",
		//de aquella zona (clave), donde el valor donde el valor será el promedio del total de todas las compras en esa zona.
		
		//1.- Creamos un diccionario auxiliar que recoja por zona los promedios de compra:
		Map<String, Double> aux = this.ventas.stream()
										.filter(v -> v.getPayment().equals(py))
										.collect(Collectors.groupingBy(Sales::getLocation,
												Collectors.averagingDouble(Sales::getTotal)));
		
		//2.- Hacemos un entrySet() al diccionario para poder aplicar .stream(), y devolver la pareja (calve, valor)
		//que tenga el mayor promedio:
		return aux.entrySet().stream()
				.max(Comparator.comparing(v -> v.getValue())).get();
		
	}
	
}

Double getPromedioDuracionesMedias(TipoVictoria vic);

	/**
	 * FUNCIÓN TIPO ??
	 * @param movimiento Movimiento concreto, por ejemplo, "Nc6" o "Bc4"
	 * @param numeroMovimiento Número movimiento
	 * @return Devuelve un Map en el que las claves son movimientos siguientes al dado como parámetro (según el movimiento y 
	 *    la posición en la que se hace), y los valores el porcentaje de veces que se ha hecho ese movimiento. Por ejemplo,
	 *    si el movimiento es "Nc6" y el número de movimiento es el 6, el Map contiene
	 *    como claves los movimientos hechos en séptimo lugar tras un movimiento "Nc6".
	 *    Los valores serán el porcentaje de veces que se han hecho esos movimientos.
	 *    
	 * @throws IllegalArgumentException si numeroMovimiento no es mayor o igual que uno.
	 */
	Map<String, Double> getPorcentajesSiguienteMovimiento(String movimiento, Integer numeroMovimiento);

	/**
	 * FUNCIÓN TIPO ??
	 * @param apertura Nombre de la apertura utilizada.
	 * @param resultado Resultado de la partida.
	 * @return Devuelve
	 * el porcentaje de partidas que incluyen la cadena de apertura 
	 * en su apertura y cuyo resultado es el dado como parámetro
	 */
	Double getPorcentajeVictoriasDeApertura(String apertura, Resultado resultado);

	/**
	 * FUNCIÓN TIPO 10
	 * @param anyo Año
	 * @param n Número entero
	 * @return Un conjunto ordenado con las n partidas más cortas jugadas en el año dado como 
	 * parámetro. El conjunto estará ordenado por el número de movimientos de la partida.
	 */
	SortedSet<Partida> getNPartidasMasCortas(Integer anyo, Integer n);

	/**
	 * FUNCIÓN TIPO ??
	 * @param anyo Año
	 * @param n Número entero
	 * @return Una lista con los ids de los n jugadores con más victorias en el año dado como parámetro.
	 */
	List<String> getNMejoresJugadores(Integer anyo, Integer n);

	/**
	 * FUNCIÓN TIPO 7/TIPO 2
	 * @param idJugador Identificador de un jugador
	 * @return El total de minutos jugados por el jugador dado como parámetro.
	 */
	Long getTiempoTotalJuego(String idJugador);

	/**
	 * FUNCION TIPO 9
	 * @param anyo Un año
	 * @param resultado Un tipo de resultado
	 * @return El id del usuario que ha ganado más partidas en
	 * el año y con el año dados como parámetro. 
	 * @throws NoSuchElementException Si no se puede calcular el máximo.
	 */
	String getJugadorMasVictorias(Integer anyo, Resultado resultado);

	/**
	 * FUNCIÓN TIPO 6
	 * @param n Número 
	 * @return true si hay algún jugador que tenga más de n victorias
	 */
	Boolean hayJugadorConMasNVictorias(Integer n);

	/**
	 * FUNCIÓN TIPO 13
	 * @param n Número entero n
	 * @return Un map en el que las claves son los tipos de victoria y el valor
	 * es el enésimo jugador con más rating entre los jugadores que han tenido
	 * victorias de ese tipo. Es decir, si hacemos un ranking de los jugadores
	 * según su rating, nos quedaríamos con el que está en la posición n
	 */
	Map<TipoVictoria, String> getGanadorNPorTipoVictoria(Integer n);

}


/**
	 * FUNCION TIPO 7
	 * 
	 * @param vic Tipo de victoria
	 * @return Devuelve la media de la duración media(en segundos) por turno de las partidas. Si la media no se puede
	 *         calcular, devuelve cero.
	 */
	@Override
	public Double getPromedioDuracionesMedias(TipoVictoria vic) {
		Double res = 0.0;
		Double suma =0.0;
		Integer cont = 0;
		for (Partida p: partidas) {
			if (p.tipoVictoria().equals(vic)) {
				suma+= p.duracion().toSeconds() / p.getNumMovimientos();
				cont++;
			}
		if (cont>0) {
			res = suma/cont;
			}
		}
		return res;
	}

	/**
	 * FUNCIÓN TIPO ??
	 * @param movimiento Movimiento concreto, por ejemplo, "Nc6" o "Bc4"
	 * @param numeroMovimiento Número movimiento
	 * @return Devuelve un Map en el que las claves son movimientos siguientes al dado como parámetro (según el movimiento y 
	 *    la posición en la que se hace), y los valores el porcentaje de veces que se ha hecho ese movimiento. Por ejemplo,
	 *    si el movimiento es "Nc6" y el número de movimiento es el 6, el Map contiene
	 *    como claves los movimientos hechos en séptimo lugar tras un movimiento "Nc6".
	 *    Los valores serán el porcentaje de veces que se han hecho esos movimientos.
	 *    
	 * @throws IllegalArgumentException si numeroMovimiento no es mayor o igual que uno.
	 */
	@Override
	public Map<String, Double> getPorcentajesSiguienteMovimiento(String movimiento, Integer numeroMovimiento){
		Checkers.check("Partidas.getPorcentajesSiguienteMovimiento:numeroMovimientos debe ser mayor que 0", numeroMovimiento>0);

		Map<String, Long> m = contarSiguientesMovimientos(movimiento, numeroMovimiento);
		Long totalMovimientos = sumarLongs(m.values());
		Map<String, Double> res = new HashMap<String, Double>();
		for (Map.Entry<String, Long> entry: m.entrySet()) {
			res.put(entry.getKey(), 100.*entry.getValue()/totalMovimientos);
		}
		return  res;
	}

	/**
	 * FUNCIÓN TIPO 5
	 * Función auxiliar
	 * @param numeros Collección de números de tipo Long
	 * @return La suma de esos números
	 */
	private Long sumarLongs(Collection<Long> numeros) {
		Long res = 0L;
		for (Long n: numeros) {
			res+=n;
		}
		return res;
	}

	/**
	 * FUNCION TIPO 5- Función auxiliar 
	 * @param movimiento Movimiento concreto, por ejemplo, "Nc6" o "Bc4"
	 * @param numeroMovimiento Número movimiento
	 * @return Devuelve un Map en el que las claves son los movimientos siguientes al dado como parámetro,
	 *     y los valores el número de veces que se repite ese movimiento al continuación del dado
	 *     como parámetro.
	 */
	private Map<String, Long> contarSiguientesMovimientos(String movimiento, Integer numeroMovimiento) {

		Map<String, Long> res = new HashMap<String, Long>();
		for (Partida p: partidas) {
			if (p.getNumMovimientos() > numeroMovimiento 
				   && p.getMovimiento(numeroMovimiento).equals(movimiento)) {
				String clave = p.getMovimiento(numeroMovimiento+1);
				if (res.containsKey(clave)) {
					res.put(clave, res.get(clave)+1);
				}else {
					res.put(clave, 1L);
				}
			}
		}
		return res;
	}

	
	/**
	 * FUNCIÓN TIPO 5
	 * @param apertura Nombre de la apertura utilizada.
	 * @param resultado Resultado de la partida.
	 * @return Devuelve
	 * el porcentaje de partidas que incluyen la cadena de apertura 
	 * en su apertura y cuyo resultado es el dado como parámetro
	 */
	@Override
	public Double getPorcentajeVictoriasDeApertura(String apertura, Resultado resultado) {
		Long cuenta = 0L;
		Double res = 0.0;
		for (Partida p: partidas) {
			if (p.apertura().contains(apertura) && p.resultado().equals(resultado)) {
				cuenta++;
			}
		}
		if (getNumeroPartidas()>0) {
			res = 100.* cuenta/getNumeroPartidas();
		}
		return res;
	}
	
	/**
	 * FUNCIÓN TIPO 5
	 * @param anyo Año
	 * @param n Número entero
	 * @return Un conjunto ordenado con las n partidas más cortas jugadas en el año dado como 
	 * parámetro. El conjunto estará ordenado por el número de movimientos de la partida.
	 */
	@Override
	public SortedSet<Partida> getNPartidasMasCortas(Integer anyo, Integer n){
		Comparator<Partida> c = Comparator.comparing(Partida::getNumMovimientos)
										.thenComparing(Comparator.naturalOrder());
		
		List<Partida> filtradas = new ArrayList<Partida>();
		for (Partida p: partidas) {
			if (p.fecha().getYear() == anyo) {
				filtradas.add(p);
			}
		}
		Collections.sort(filtradas, Comparator.comparing(Partida::duracion));
		SortedSet<Partida> ss = new TreeSet<Partida>(c);
		ss.addAll(filtradas.subList(0,n));
		return ss;
	}
	
	/**
	 * FUNCIÓN TIPO ??
	 * @param anyo Año
	 * @param n Número entero
	 * @return Una lista con los ids de los n jugadores con más victorias en al año dado como parámetro.
	 */
	@Override
	public List<String> getNMejoresJugadores(Integer anyo, Integer n){ 
		
		Predicate<Partida> filtro = p->p.fecha().getYear() == anyo && p.getJugadorGanador()!= null;
		Map<String, Long> mc = getNumVictoriasPorJugador(filtro);
		Comparator<String> c = Comparator.comparing(jugador->mc.get(jugador));
		List<String> jugadores = new ArrayList<String>(mc.keySet());
		Collections.sort(jugadores, c);
		return new ArrayList<String>(jugadores.subList(0, n));		 
	}
		
	/**
	 * @param filtro Predicado para filtrar las partidas que se van a contar
	 * @return Un Map que asocia los ids de los usuarios con el número de victorias
	 * que tras filtrar con el predicado dado como parámetro
	 */
	private Map<String, Long> getNumVictoriasPorJugador(Predicate<Partida> filtro) {
		Map<String, Long> res = new HashMap<String,Long>();
		for (Partida p: partidas) {
			if (filtro.test(p)
					) {
				String clave = p.getJugadorGanador();
				if (res.containsKey(clave)) {
					res.put(clave, res.get(clave)+1);
				}else {
					res.put(clave, 1L);
				}
			}
		}
		return res;		
	}

	/**
	 * FUNCIÓN TIPO 2
	 * @param idJugador Identificador de un jugador
	 * @return El total de minutos jugados por el jugador dado como parámetro.
	 */
	@Override
	public Long getTiempoTotalJuego(String idJugador) {	
		Long total = 0L;
		for (Partida p: partidas) {
			if (p.jugadorBlancas().equals(idJugador) ||p.jugadorNegras().equals(idJugador)) {
				total+=p.duracion().toMinutes();
			}
		 }
		return total;
		}

	
	/**
	 * FUNCION TIPO ???
	 * @param anyo Un año
	 * @param resultado Un tipo de resultado
	 * @return El id del usuario que ha ganado más partidas en
	 * el año y con el año dados como parámetro. 
	 * @throws NoSuchElementException Si no se puede calcular el máximo.
	 */
	@Override
	public String getJugadorMasVictorias(Integer anyo, Resultado resultado) {

		Predicate<Partida> filtro = 
				p-> p.fecha().getYear() == anyo && p.resultado().equals(resultado);
		Map<String, Long> mc = getNumVictoriasPorJugador(filtro);
		
		Long m = null;
		String jugadorMaximo = null;
		for (String jugador: mc.keySet()) {
		Long cuenta = mc.get(jugador);
			if (m==null || m<cuenta ) {
				m = cuenta;
				jugadorMaximo = jugador;	
			}
		}
		
		if (jugadorMaximo == null) {
			throw new NoSuchElementException();
		}
		return jugadorMaximo;
	}
	
	/**
	 * FUNCIÓN TIPO 6
	 * @param n Número 
	 * @return true si hay algún jugador que tenga más de n victorias
	 */
	@Override
	public Boolean hayJugadorConMasNVictorias(Integer n) {
		Predicate<Partida> filtro = 
				p-> p.getJugadorGanador()!= null;
		Map<String, Long> mc = getNumVictoriasPorJugador(filtro);
		Boolean res = false;
		//Tratamiento existe
		for (Long num: mc.values()) {
			if (num>n) {
				res = true;
				break;
			}
		}
		
		return res;
	}
	
	
	/**
	 * FUNCIÓN TIPO 13
	 * @param n Número entero n
	 * @return Un map en el que las claves son los tipos de victoria y el valor
	 * es el enésimo jugador con más rating entre los jugadores que han tenido
	 * victorias de ese tipo. Es decir, si hacemos un ranking de los jugadores
	 * según su rating, nos quedaríamos con el que está en la posición n
	 */
	@Override
	public Map<TipoVictoria, String> getGanadorNPorTipoVictoria(Integer n){
		Map<TipoVictoria, List<Partida>> m = agruparPorTipoVictoria();
		Map<TipoVictoria, String> res = new HashMap<TipoVictoria, String>();
		for(Map.Entry<TipoVictoria, List<Partida>> e: m.entrySet()) {
			res.put(e.getKey(), seleccionarJugadorNSegunRating(e.getValue(), n));
		}
		return res;
	}	
	private Map<TipoVictoria, List<Partida>> agruparPorTipoVictoria(){
		Map<TipoVictoria, List<Partida>> res = new HashMap<TipoVictoria, List<Partida>>();
		for(Partida p:partidas) {
			if (p.getJugadorGanador()!=null) {
				TipoVictoria clave = p.tipoVictoria();
				if (res.containsKey(clave)) {
					res.get(clave).add(p);
				} else {
					List<Partida> partidas = new ArrayList<Partida>();
					partidas.add(p);
					res.put(clave, partidas);
				}
			}
		}
		return res;
	}
	private String seleccionarJugadorNSegunRating(List<Partida> lista, Integer n) {
		String res = null;
		if (lista.size()>=n) {
			Collections.sort(lista,Comparator.comparing(Partida::getRatingGanador) );
			res = lista.get(n).getJugadorGanador();
		}
		return res;
	}

	public String toString() {
		String partidasStr = partidas.stream().map(Object::toString).collect(Collectors.joining("\n"));
		return "Partidas [numPartidas =" + getNumeroPartidas() + " partidas=" + partidasStr + "]";
	}

}


